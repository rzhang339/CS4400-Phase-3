!! Overall !!
!! Astericks surrouding a string represent an input from the front end !!
!! All trues and falses must be converted to 1s and 0s respectively !!

## Retrieves relevant User information given input from user on login screen
## Retrieves userType for next page selection
## Returns null if no User matches?

SELECT username, password, userType FROM User WHERE email == *email* AND password == *password*

## Adds visitor to User table in database

INSERT INTO User (email, username, password, userType) VALUES (*email*, *username*, *password*, 'visitor')

## Adds owner to User table in database

INSERT INTO User (email, username, password, userType) VALUES (*email*, *username*, *password*, 'owner')

## Retrieves selections for produceType based on propertyType (propertyType
## restrictions enforced in backend)

SELECT produceName from Produce WHERE produceType == *propertyType* AND itemApproved == 1

## Adds property to Property table in database
!! See below to get newId

INSERT INTO Property (propertyName, id, isPublic, size, isCommercial, streetAddress, city, zip, propertyType, ownedBy) VALUES (*propertyName*, newId, *isPublic*, *size*, *isCommercial*, *streetAddress*, *city*, *zip*, *propertyType*, *email*)

## Gets id for the new property ** you must add one to this value and if
## this returns null, choose your start (0 or 1)

SELECT MAX(id) FROM Property

## Associates Produce growing with a Property

INSERT INTO FarmGrows (id, produceName) VALUES (*id*, *produceName*)

## Gets some of the information that represents the current owner's properties
## The @@s are default values, this will allow for reuse of this query when
## sorting and searching.  We can discuss how the previous filter value and
## the previous sorting direction/style will be persistent

SELECT propertyName, streetAddress, city, zip, size, propertyType, isPublic, isCommercial, id, approvedBy, visits, avgRating FROM (SELECT propertyName, streetAddress, city, zip, size, propertyType, isPublic, isCommercial, id, approvedBy, COUNT(*) AS visits, AVG(rating) AS avgRating, email FROM Property NATURAL JOIN Visits  GROUP BY propertyName) AS T  WHERE *email* = T.email AND @@T.propertyName IS NOT NULL@@ ORDER BY @@T.propertyName@@;


## Gets some information that represents other owner's properties

SELECT propertyName, streetAddress, city, zip, size, propertyType, isPublic, isCommercial, id, approvedBy, visits, avgRating FROM (SELECT propertyName, streetAddress, city, zip, size, propertyType, isPublic, isCommercial, id, approvedBy, COUNT(*) AS visits, AVG(rating) AS avgRating, email FROM Property NATURAL JOIN Visits  GROUP BY propertyName) AS T  WHERE *email* != T.email AND @@T.propertyName IS NOT NULL@@ AND approvedBy IS NOT NULL ORDER BY @@T.propertyName@@;

## Search by text input and criteria other owner's properties

SELECT propertyName, streetAddress, city, zip, size, propertyType, isPublic, isCommercial, id, COUNT(*) AS visits, AVG(rating) AS avgRating  FROM Property NATURAL JOIN Visits WHERE *email* != email WHERE approved == 1 AND *email* != email AND *search* == *chosen attribute to search by* ORDER BY propertyName GROUP BY propertyName


